//this is the driver that will carry out the 7 main project functions as listed above
//allow user to input 10 employees... display them... etc
package application;
import util.LinearNode;
import util.LinkedList;
import java.util.Scanner;

public class TrainingCourses{
	//global variables
	LinkedList<Employee> list; //Global variable
	Employee e;

	private String num = "", name = "", course = "";
	private int years = 0;  

	//CONSTRUCTOR
	public TrainingCourses(){
		//Scanner scan = new Scanner(System.in);
		list = new LinkedList<Employee>();

		//


		testInput();
		//inputEmployee();
		displayEmployee();
		removeEmployeeNum(); //remove 1 employee using [num]
		displayEmployee();
		removeEmployeesFromCourse(); //remove all employees in course using [course]
		displayEmployee();


		//issues with remove employee
		//its the same as adding except if i enter eNum e.g. 5 even tho it doesnt exist 
		// i get error "duplicate found... so fix the method (contains)
		//same with if it does exist, i cant remove it.. 
		//its a method for adding afterall so i could create a new one?
	}

	//this is so i dont have to input employees all the time
	public void testInput(){
		Employee e;
		e = new Employee("e1", "name1", 5, "food1"); list.add(e);
		e = new Employee("e2", "name2", 6, "food1"); list.add(e);
		e = new Employee("e3", "name3", 7, "food1"); list.add(e);
		e = new Employee("e4", "name4", 8, "food2"); list.add(e);
		e = new Employee("e5", "name5", 9, "food2"); list.add(e);
		e = new Employee("e6", "name6", 5, "food2"); list.add(e);
		e = new Employee("e7", "name7", 5, "food3"); list.add(e);
		e = new Employee("e8", "name8", 5, "food3"); list.add(e);
		e = new Employee("e9", "name9", 5, "food3"); list.add(e);
		e = new Employee("e10", "name10", 5, "food4"); list.add(e);
	}

	//1. add 10 employees
	public void inputEmployee() {
		Scanner scan = new Scanner(System.in);
		for (int count=1; count <=10; count++) {

			do //1===========================================[1]
			{ 
				System.out.print("Enter Employee [--Number--] " + count + " : ");
				num = scan.nextLine();
				e = new Employee(num, "", 0, ""); // create employee object with the number for comparison

			}while(list.contains(e) == true); //true = duplicate found 
			//1==============================================(1)

			//------------------------------
			System.out.print("Enter Employee [Name] " + count + " : ");
			name = scan.nextLine();
			//------------------------------

			do //2===========================================[2]
			{
				System.out.print("Enter Employee [Years] " + count + " : ");
				years = scan.nextInt();
				scan.nextLine();

			}while(enoughYears(years) == false);
			//2==============================================(2)


			//must start with first 4 letters "food"
			do //3===========================================[3]
			{
				System.out.print("Enter Employee [Course] " + count + " : ");
				course = scan.nextLine();
			}while(correctCourse(course) == false);
			//3==============================================(3)

			System.out.print("- - - - - - - - - - - - - - - - -\n");

			//pass info into list
			e = new Employee(num, name, years, course);
			//Add to LinkedList
			list.add(e);
		}
	}


	//must have 5 or more years of experience
	public boolean enoughYears(int years){
		if(years >= 5) {
			return true;
		}else {
			System.out.print("[ERROR] - minimum of 5 working years required \n");
			return false;
		}
	}

	//course name must start with 4 letters "FOOD"
	//issues with capitalisation
	//can also make input lower case?
	public boolean correctCourse(String course) {
		String lowerCaseCourse = course.toLowerCase(); //convert course to lowercase
		if(lowerCaseCourse.startsWith("food")) {
			return true;
		} else {
			System.out.print("[ERROR] - course name doesn't start with 'food' \n");
			return false;
		}
	}

	//2. display all employee details
	public void displayEmployee() {
		Scanner scan = new Scanner(System.in);
		System.out.print("------------------------------");
		System.out.print(list.toString());
		System.out.print("------------------------------");
		System.out.print("\n[Enter any key to continue]: ");
		scan.nextLine();
	}




	//3. remove an employee from the course, using their employee number
	public void removeEmployeeNum() {
		Scanner scan = new Scanner(System.in);
		Employee e;
		Employee e1;

		String answer;
		boolean repeat;

		do { //=======================================================
			// ask the user to input the employee number they wish to remove
			System.out.print("Enter [Employee Number] to find and remove: ");
			num = scan.nextLine();
			e = new Employee(num, "", 0, "");  // create employee object with the number for comparison

			e1 = list.remove(e);

			if (e1 == null) {
				System.out.print("[ERROR] - Employee not found!");
			} else {
				System.out.println("Employee removed successfully!");
				//System.out.print(list.toString()); //test display
			}


			System.out.print("\nDo you wish to remove another employee? [Y / N]: ");
			answer = scan.nextLine();

			if(answer.equalsIgnoreCase("Y")) {
				repeat = true; 
			} else {
				repeat = false; 
			}
		} while (repeat == true);  //continue loop while repeat = true
	}










		//==========================================================================
		public void removeEmployeesFromCourse() {
			Scanner scan = new Scanner(System.in);
			LinearNode<Employee> current = null;
			Employee e;
			String courseRemove;
			String answer;
			boolean repeat;

			do {
				System.out.print("Enter [Course] to find and remove ALL employees from: ");
				courseRemove = scan.nextLine().toLowerCase(); 
				boolean found = false; //set found to false by default
				current = list.getFront(); //set current to front of list


				//search through list
				while (current != null) {
					if (current.getElement().equals(element)) {
						result = current.getElement(); //save element to return it like a temp

						//if removing a NON first element, then bypass to next node (SET previous to next, and next to get next)
						previous.setNext(current.getNext());

						current.setNext(null); //garbage collection
						count--;
						return result; // Return the removed element
					}

					// Move to the next node
					previous = current;  // previous will move with current
					current = current.getNext(); // current moves to the next node





				if (!found) {
					System.out.println("[ERROR] - No Employees found in that Course.");
				}

				// Ask if the user wants to remove employees from another course
				System.out.print("\nDo you wish to remove employees from another course? [Y / N]: ");
				answer = scan.nextLine();
				if(answer.equalsIgnoreCase("y")){
					repeat = true;
				}else {
					repeat = false;
				}

			} while(repeat == true);  // continue loop while repeat = true
		}
		//==========================================================================






		//==========================================================================
		public void removeEmployeesFromCourse() {
			Scanner scan = new Scanner(System.in);
			LinearNode<Employee> current = null;
			Employee e;
			String courseRemove;
			String answer;
			boolean repeat;

			do {
				System.out.print("Enter [Course] to find and remove ALL employees from: ");
				courseRemove = scan.nextLine().toLowerCase(); 
				boolean found = false; //set found to false by default
				current = list.getFront(); //set current to front of list

				//use a while loop instead of for loop as it only goes through once
				while(current != null) {
					if (current.getElement().getCourseName().equalsIgnoreCase(courseRemove)) {
						e = current.getElement();
						list.remove(e);

						System.out.println("Employee removed from course: " + courseRemove);
						found = true; 
					}
					current = current.getNext(); //move to the next employee in the list
				}




				if (!found) {
					System.out.println("[ERROR] - No Employees found in that Course.");
				}

				// Ask if the user wants to remove employees from another course
				System.out.print("\nDo you wish to remove employees from another course? [Y / N]: ");
				answer = scan.nextLine();
				if(answer.equalsIgnoreCase("y")){
					repeat = true;
				}else {
					repeat = false;
				}

			} while(repeat == true);  // continue loop while repeat = true
		}
		//==========================================================================










		//7. run your own personalised function (it can be anywhere, doesn't have to be the last execution in program)


		public static void main(String[] args) {
			new TrainingCourses();
		}
	}
