/*
 * File name : ADS CA1 
 * Author : STEFAN FILIP
 * Student number : C23421806
 * Description of class : THIS IS THE DRIVER CLASS WHERE ALL USER OPTIONS WILL BE EXECUTED
 */

//this is the driver that will carry out the 7 main project functions as listed above
//allow user to input 10 employees... display them... etc
package application;
import util.LinearNode;
import util.LinkedList;
import java.util.Scanner;

public class TrainingCourses{
	//global variables
	LinkedList<Employee> list; //Global variable
	Employee e;

	private String num = "", name = "", course = "";
	private int years = 0;  

	//CONSTRUCTOR
	public TrainingCourses(){
		list = new LinkedList<Employee>();

		testInput();
		//inputEmployee(); //1.


		displayEmployee(); //2.
		removeEmployeeNum(); //3. remove 1 employee using [num]
		displayEmployee(); //4.
		removeEmployeesFromCourse(); //5. remove all employees in course using [course]
		displayEmployee(); //6.

		findEmployeesByCourse(); //7. display all employees in course using [course]
	}

	//this is so i don't have to input employees all the time
	public void testInput(){
		Employee e;
		e = new Employee("e1", "name1", 5, "food1"); list.add(e);
		e = new Employee("e2", "name2", 6, "food1"); list.add(e);
		e = new Employee("e3", "name3", 7, "food1"); list.add(e);
		e = new Employee("e4", "name4", 8, "food2"); list.add(e);
		e = new Employee("e5", "name5", 9, "food2"); list.add(e);
		e = new Employee("e6", "name6", 5, "food2"); list.add(e);
		e = new Employee("e7", "name7", 5, "food3"); list.add(e);
		e = new Employee("e8", "name8", 5, "food3"); list.add(e);
		e = new Employee("e9", "name9", 5, "food3"); list.add(e);
		e = new Employee("e10", "name10", 5, "food4"); list.add(e);
	}

	//1. add 10 employees
	public void inputEmployee() {
		Scanner scan = new Scanner(System.in);
		for (int count=1; count <=10; count++) {

			do //1===========================================[1]
			{ 
				System.out.print("Enter Employee [--Number--] " + count + " : ");
				num = scan.nextLine();
				e = new Employee(num, "", 0, ""); // create employee object with the number for comparison

			}while(list.contains(e) == true); //true = duplicate found 
			//1==============================================(1)

			//------------------------------
			System.out.print("Enter Employee [Name] " + count + " : ");
			name = scan.nextLine();
			//------------------------------

			do //2===========================================[2]
			{
				System.out.print("Enter Employee [Years] " + count + " : ");
				years = scan.nextInt();
				scan.nextLine();

			}while(enoughYears(years) == false);
			//2==============================================(2)


			//must start with first 4 letters "food"
			do //3===========================================[3]
			{
				System.out.print("Enter Employee [Course] " + count + " : ");
				course = scan.nextLine();
			}while(correctCourse(course) == false);
			//3==============================================(3)

			System.out.print("- - - - - - - - - - - - - - - - -\n");

			//pass info into list
			e = new Employee(num, name, years, course);
			//Add to LinkedList
			list.add(e);
		}
	}


	//must have 5 or more years of experience
	public boolean enoughYears(int years){
		if(years >= 5) {
			return true;
		}else {
			System.out.print("[ERROR] - minimum of 5 working years required \n");
			return false;
		}
	}

	//course name must start with 4 letters "FOOD"
	public boolean correctCourse(String course) {
		String lowerCaseCourse = course.toLowerCase(); //convert course to lowercase
		if(lowerCaseCourse.startsWith("food")) {
			return true;
		} else {
			System.out.print("[ERROR] - course name doesn't start with 'food' \n");
			return false;
		}
	}





	//2. display all employee details
	public void displayEmployee() {
		Scanner scan = new Scanner(System.in);
		System.out.print("------------------------------");
		System.out.print(list.toString());
		System.out.print("------------------------------");
		System.out.print("\n[Enter any key to continue]: ");
		scan.nextLine();
	}




	//3. remove an employee from the course, using their employee number
	public void removeEmployeeNum() {
		Scanner scan = new Scanner(System.in);
		Employee e;
		Employee e1;

		String answer;
		boolean repeat;

		do { //=======================================================
			// ask the user to input the employee number they wish to remove
			System.out.print("Enter [Employee Number] to find and remove: ");
			num = scan.nextLine();
			e = new Employee(num, "", 0, "");  // create employee object with the number for comparison

			e1 = list.remove(e);

			if (e1 == null) {
				System.out.print("[ERROR] - Employee not found!");
			} else {
				System.out.println("Employee removed successfully!");
				//System.out.print(list.toString()); //test display
			}


			System.out.print("\nDo you wish to remove another employee? [Y / N]: ");
			answer = scan.nextLine();

			if(answer.equalsIgnoreCase("Y")) {
				repeat = true; 
			} else {
				repeat = false; 
			}
		} while (repeat == true);  //continue loop while repeat = true
	}




	//5.
	//==========================================================================
	public void removeEmployeesFromCourse() {
		Scanner scan = new Scanner(System.in);
		LinearNode<Employee> current = list.getFront();
		LinearNode<Employee> previous = list.getFront();  
		Employee e;
		String courseRemove;
		String answer;
		boolean repeat;

		boolean found;
		int removedCount;

		do {
			System.out.print("Enter [Course] to find and remove ALL employees from: ");
			courseRemove = scan.nextLine().toLowerCase();
			removedCount = 0; 
			found = false;  

			while (current != null) {
				if (current.getElement().getCourseName().equalsIgnoreCase(courseRemove)) { //if match found, remove
					e = current.getElement(); //get current employee to be removed
					list.remove(e);  
					removedCount++; 
					found = true;

					////////////////////////////
					// After removal, continue traversal without resetting to front
					if (previous != null) {
						current = previous.getNext(); // Move current to the next node after removal
					} else {
						current = list.getFront(); // If it's the first node, just continue
					}
					////////////////////////////

				} else {
					//move to next node if nothing got removed
					previous = current;
					current = current.getNext();
				}
			}

			if (found) {
				System.out.println(removedCount + " Employee(s) removed from course: " + courseRemove);
			} else {
				System.out.println("[ERROR] - No Employees found in that Course.");
			}

			System.out.print("\nDo you wish to remove employees from another course? [Y / N]: ");
			answer = scan.nextLine();
			if(answer.equalsIgnoreCase("y")){
				repeat = true;
			} else {
				repeat = false;
			}

		} while(repeat == true);  // continue loop while repeat = true
	}
	//==========================================================================










	//7. run your own personalised function (it can be anywhere, doesn't have to be the last execution in program)

	public void findEmployeesByCourse() {
		Scanner scan = new Scanner(System.in);
		LinearNode<Employee> current = list.getFront();
		System.out.print("Enter [course] name to find employees in: ");
		String courseToFind = scan.nextLine().toLowerCase();

		boolean found = false;

		System.out.println("Employees enrolled in " + courseToFind + ":");

		//search list and find employees for the course
		while (current != null) {
			if (current.getElement().getCourseName().equalsIgnoreCase(courseToFind)) {
				System.out.println(current.getElement().toString());  //display the employee details
				found = true;
			}
			current = current.getNext();  //move to the next employee
		}

		if (!found) {
			System.out.println("[ERROR] - No employees found in that course.");
		}
	}



	private LinearNode<Employee> front() {
		// TODO Auto-generated method stub
		return null;
	}

	public static void main(String[] args) {
		new TrainingCourses();
	}
}
